import csv
import re
import sqlite3
from datetime import datetime, date
import datetime as dt
from itertools import chain

import matplotlib as mpl
import pandas as pd
import statsmodels.api as sm
from django.db.models import Avg
from fbprophet import Prophet
import matplotlib.pyplot as plt
import seaborn as sns

import pytz
import requests
from django.shortcuts import render
from fbprophet.plot import plot_plotly, plot_components_plotly
from pandas import DataFrame
from pydash import join, chunk
from rest_framework import viewsets
from sklearn.metrics import r2_score


from django.http import HttpResponse
from weather.models import ReportStation, ListNameStation, PmData, WeatherData, WeatherHistory
from weather.serializers import ReportStationSerializer, WeatherDataSerializer, WeatherHistorySerializer, \
    ListNameStationSerializer


from sqlalchemy import create_engine


class WeatherViewset(viewsets.ModelViewSet):
    serializer_class = ListNameStationSerializer
    # serializer_class = ReportStationSerializer
    # serializer_class = WeatherDataSerializer
    search_fields = ['name']

    def get_queryset(self):
        data_report = ReportStation.objects.all()
        data_weather = WeatherData.objects.all()
        # print(data)
        list_data = list(chain(data_report, data_weather))
        return list_data

    def save_listname(self):
        # queryset = ListNameStation.objects.all()
        # serializer_class = ListNameStationSerializer
        station_names = "HS9AN-10,HS9AS-10,HS9AT-10,HS8AK-10,HS8AT-10,E23JWE-1,HS8KF-10,HS8INB-1,E29RZQ,HS8KAY,E29AE-8,E29WWT-2,HS8AC-10,HS7AJ-10,HS7AP-10,HS2KYA-5,HS2KYA-1,HS2AB-10,HS2UJE-10,HS2QJJ-14,HS2AR-10,E21TMW-3,E27EHM-3,E22ERY-2,E27HCD-1,E24OWX-2,E27HUQ-3,E23GYM-1,HS0QKD-2,HS2XQB-3,E24CI-1,HS0QKD-3,HS5SQI-1,HS2GJW-1,E21HVV-1,HS2PQV-1,FW6985,FW1926,EW4214,HS1FVL-10,HS1AN-10,E25ECY-1,HS1IFU-13,HS7AT-11,HS7AM-10,E20EHQ-13,HS1HTW-2,HS5GDX-1,HS3PIK-2,FW0368,E27ASY-4,HS1AL-10,APRSTH,HS3RXX-2,HS0QKD-4,E21DII-4,HS4RBS-2,HS3PKX-1,HS3NOQ-12,HS3NOQ-2,HS3PQJ-2,HS3PQJ-1,HS3PQJ-3,HS3LIQ-2,HS5GDX-2,HS3ICB-2,HS0ZGD-1,E23HMS-1,HS3LSE-11,HS3RVL-3,HS3AK-10,HS3MXC-2,HS3AU-10,HS3LSE-5,HS1MHE-1,HS4RAY-1,E24QND-1,E24QFF-1,HS4AP-10,E25HA-1,HS4LWD-1,HS4AC-10,HS4YYZ-1,E24TVS-2,E24TVS-1,E27AH-1,HS4ROI-1,HS4POQ-10,HS6NYW-3,HS6AB-10,E24OWX-1,E24YPM-1,HS6TUX,HS5XSZ-1,HS8JHY-1,HS5AM-10,HS5FXK-2,HS5ZEZ-1,HS5FXK,E28UY-13,DW2642,E22ZMG-1,HS5AC-10,HS5WFI-13"

        names = station_names.split(",")
        chunked_names = chunk(names, 1)
        for j in chunked_names:
            name = join(j, ",")
            obj, is_created = ListNameStation.objects.get_or_create(name=name)
            obj.save()

    def save_reportstation(self):
        list_name = ListNameStation.objects.all()
        list_names = list(list_name.values_list('name'))
        # print("list_names")
        str_names = ""
        for j in list_names:
            str_names += join(j, ",") + ","
        names = str_names.split(",")
        chunked_names = chunk(names, 20)
        URL = "https://api.aprs.fi/api/get?"

        for j in chunked_names:
            name = join(j, ",")
            what = "loc"
            apikey = "149072.5M4NG9sB5ZNWSCx"
            # 149072.5M4NG9sB5ZNWSCx
            # 155078.nzsdK4hEn2R2n13o
            format = "json"
            PARAMS = {'name': name, 'what': what, 'apikey': apikey, 'format': format}
            api_request = requests.get(url=URL, params=PARAMS)
            # print("call api 1")
            # api_request.raise_for_status()
            data_weathers = api_request.json()
            aprs_datas = data_weathers['entries']
            for i in aprs_datas:
                date_data = {}
                timestamp = i['lasttime']
                date_time = datetime.fromtimestamp(int(timestamp))
                timezone = pytz.timezone("Asia/Bangkok")
                i['date_time'] = date_time.astimezone(timezone)
                date_data.update(i)
                i.update(date_data)
                obj, is_created = ReportStation.objects.update_or_create(name=i["name"])
                for j in i:
                    setattr(obj, j, i[j])
                obj.save()

    def save_pm(self):
        queryset_station = ReportStation.objects.all()
        list_pm = list(queryset_station.values('name', 'comment'))
        pm_total = []
        pmdata = []
        for i in list_pm:
            # print(i['comment'])
            name_pm = i['comment'].split("PM")
            # print(name_pm)
            try:
                # print(name_pm[1])
                num_pm = re.findall(r'(?<=\[)(.*?)(?=\])', name_pm[1])  # x
                # print(num_pm)
                list_key = ['pm1', 'pm2_5', 'pm10']  # j
                output = {}
                output.update(i)
                for j, x in enumerate(num_pm):
                    # print(x)
                    output[list_key[j]] = x
                    # print(output)
                pmdata.append(output)
                # print(pmdata)
            except:
                pass

        for i in pmdata:
            try:
                obj, is_created = PmData.objects.update_or_create(
                    name=i['name'], pm1=i['pm1'],
                    pm2_5=i['pm2_5'], pm10=i['pm10'])
                for j in i:
                    setattr(obj, j, i[j])
                    # print(i[j])
                obj.save()
            except:
                # print(i)
                pass

    def save_weatherdata(self):
        queryset_pm = PmData.objects.all()
        queryset_names = ListNameStation.objects.all()

        list_names = list(queryset_names.values_list('name'))
        list_pm = list(queryset_pm.values('name', 'pm1', 'pm2_5', 'pm10'))

        str_names = ""
        for j in list_names:
            str_names += join(j, ",") + ","
        names = str_names.split(",")
        chunked_names = chunk(names, 20)
        URL = "https://api.aprs.fi/api/get?"
        for j in chunked_names:
            name = join(j, ",")
            what = "wx"
            apikey = "149072.5M4NG9sB5ZNWSCx"
            format = "json"
            PARAMS = {'name': name, 'what': what, 'apikey': apikey, 'format': format}
            response = requests.get(url=URL, params=PARAMS)

            response.raise_for_status()
            datas_weather = response.json()
            aprs_datas = datas_weather['entries']
            for i in aprs_datas:
                for pm in list_pm:
                    if pm['name'] == i['name']:
                        i.update(pm)
                    pass
                date_data = {}
                timestamp = i['time']
                date_time = datetime.fromtimestamp(int(timestamp))
                timezone = pytz.timezone("Asia/Bangkok")
                i['date_time'] = date_time.astimezone(timezone)
                date_data.update(i)
                i.update(date_data)
                obj, is_created = WeatherData.objects.update_or_create(name=i["name"])

                for j in i:
                    setattr(obj, j, i[j])
                obj.save()

    def export(self):
        try:
            df = pd.read_csv('./weather/weather_history.csv')
            print(df)
            with open('./weather/weather_history.csv', 'a') as f:
                writer = csv.writer(f)
                # writer.writerow(['id', 'name','temp','date_time',])

                for data in WeatherData.objects.all().values_list('id', 'name','temp','date_time', ):
                    timezone = pytz.timezone("Asia/Bangkok")
                    try:
                        edit_datedata = data[3].astimezone(timezone)
                        local_data = edit_datedata.strftime('%Y-%m-%d')
                        tuple_data = (data[0],data[1],data[2],local_data)
                    except:
                        pass
                    writer.writerow(tuple_data)
        except:
            with open('./weather/weather_history.csv', 'w') as f:
                writer = csv.writer(f)
                writer.writerow(['id', 'name', 'temp', 'date_time', ])
                for data in WeatherData.objects.all().values_list('id', 'name','temp','date_time', ):
                    timezone = pytz.timezone("Asia/Bangkok")
                    try:
                        edit_datedata = data[3].astimezone(timezone)
                        local_data = edit_datedata.strftime('%Y-%m-%d')
                        tuple_data = (data[0],data[1],data[2],local_data)
                    except:
                        pass
                    writer.writerow(tuple_data)
    # โหมมด 'a'เขียน row เพิ่ม
    # with open('./weather/weather_history.csv', 'w') as f:
    #     writer = csv.writer(f)
    #     writer.writerow(['id', 'name','temp', 'temp_avg', 'temp_max', 'temp_min','date_time',])
    #
    #     for data in WeatherHistory.objects.all().values_list('id', 'name','temp', 'temp_avg',
    #                                                       'temp_max', 'temp_min','date_time', ):
    #         timezone = pytz.timezone("Asia/Bangkok")
    #         try:
    #             edit_datedata = data[6].astimezone(timezone)
    #             local_data = edit_datedata.strftime('%m/%d/%Y %H:%M:%S')
    #             tuple_data = (data[0],data[1],data[2],data[3],data[4],data[5],local_data)
    #         except:
    #             pass
    #         writer.writerow(tuple_data)

    def add_data_history(self):
        data_df = pd.read_csv('./weather/weather_history.csv')
        # print(data_df)
        data_df = data_df.reset_index()
        # df=data_df[['id','name','temp','date_time']].groupby(['name','date_time']).agg({'temp':['mean','max','min']})
        d_f= data_df[['id','name','temp','date_time']].groupby(['name','date_time']).agg({'temp':['mean','max','min']})
        # print(d_f)
        dict_all={}
        list_data=[]
        for row in d_f.iterrows():
            dict_data={}
            dict_data['name'],dict_data['temp_avg'],dict_data['temp_max'],dict_data['temp_min'],dict_data['date_time']=row[0][0],row[1][0],row[1][1],row[1][2],row[0][1]
            # print(dict_data['date_time'])
            date_time_str = dict_data['date_time']
            date_time_obj = dt.datetime.strptime(date_time_str, '%Y-%m-%d')
            dict_data['date_time'] = date_time_obj
            dict_all.update(dict_data)
            dict_all_copy = dict_all.copy()
            list_data.append(dict_all_copy)
        # for i in list_data:
        #     print(type(i['date_time']))
        for data in list_data:
            # print(data)
            obj, is_created = WeatherHistory.objects.update_or_create(name=data["name"],date_time=data['date_time'])

            for j in data:
                setattr(obj, j, data[j])
            obj.save()

        with open('./weather/weather_forecast.csv', 'w') as f:

            writer = csv.writer(f)
            writer.writerow(['id', 'name', 'temp_avg', 'temp_max', 'temp_min','date_time',])

            for data in WeatherHistory.objects.all().values_list('id', 'name',
                                                'temp_avg', 'temp_max', 'temp_min','date_time', ):
                timezone = pytz.timezone("Asia/Bangkok")
                try:
                    edit_datedata = data[5].astimezone(timezone)
                    local_data = edit_datedata.strftime('%Y-%m-%d')
                    tuple_data = (data[0],data[1],data[2],data[3],data[4],local_data)
                except:
                    pass
                writer.writerow(tuple_data)

    def test(self):
        with open('./weather/weather_forecast2.csv', 'w') as f:

            writer = csv.writer(f)
            writer.writerow(['id', 'name', 'temp_avg', 'temp_max', 'temp_min','date_time',])

            for data in WeatherHistory.objects.all().values_list('id', 'name',
                                                'temp_avg', 'temp_max', 'temp_min','date_time', ):
                timezone = pytz.timezone("Asia/Bangkok")
                try:
                    edit_datedata = data[5].astimezone(timezone)
                    # print(edit_datedata.date())
                    # print(type(edit_datedata))
                    # print(type(datetime.today().date()))
                    if edit_datedata.date() == datetime.today().date():
                        # print("gg")
                        print(edit_datedata)
                    # local_data = edit_datedata.strftime('%Y-%m-%d %H:%M:%S')
                    # tuple_data = (data[0],data[1],data[2],data[3],data[4],local_data)
                except:
                    pass
                # writer.writerow(tuple_data)

    def forecast(df):
        pd.plotting.register_matplotlib_converters()
        mpl.rcParams['figure.figsize'] = (20, 10)
        sns.set()
        # df = pd.read_csv('./weather/weather_forecast.csv',
        #                  parse_dates=True, usecols=['date_time', 'temp_avg', 'name'])
        #
        # df.head()
        # data= [[1616202516000, 27.2], [1616203117000, 26.7], [1616203751000, 26.7], [1616204418000, 26.7],
        #          [1616205052000, 26.7], [1616205654000, 26.7], [1616206288000, 26.7], [1616206890000, 26.7],
        #          [1616207491000, 26.1], [1616208093000, 26.1], [1616208728000, 26.1], [1616209330000, 26.1],
        #          [1616209997000, 26.1], [1616210599000, 26.1], [1616211201000, 26.1], [1616211804000, 26.1],
        #          [1616212470000, 26.1], [1616213072000, 26.1], [1616213674000, 25.6], [1616214343000, 25.6],
        #          [1616214977000, 25.6], [1616215709000, 25.6], [1616216312000, 25.6], [1616216947000, 25],
        #          [1616217548000, 25], [1616218183000, 25], [1616218785000, 24.4], [1616219419000, 24.4],
        #          [1616220021000, 24.4], [1616220656000, 23.9], [1616221258000, 23.9], [1616221892000, 23.9],
        #          [1616222494000, 23.9], [1616223161000, 23.9], [1616223762000, 23.9], [1616224364000, 23.9],
        #          [1616224998000, 23.9], [1616225599000, 23.9], [1616226201000, 23.9], [1616226802000, 24.4],
        #          [1616227404000, 24.4], [1616228006000, 25], [1616228608000, 25.6], [1616229243000, 25.6],
        #          [1616229911000, 25.6], [1616230513000, 26.1], [1616231116000, 26.7], [1616231783000, 26.7],
        #          [1616232514000, 27.2], [1616233246000, 27.2], [1616233848000, 27.8], [1616234451000, 28.3],
        #          [1616235150000, 28.3], [1616235784000, 28.9], [1616236386000, 29.4], [1616236987000, 29.4],
        #          [1616237590000, 30], [1616238192000, 30.6], [1616238794000, 31.1], [1616239396000, 31.1],
        #          [1616239998000, 31.7], [1616240600000, 32.2], [1616241203000, 32.2], [1616241805000, 32.8],
        #          [1616242439000, 32.8], [1616243106000, 33.3], [1616243708000, 33.9], [1616244310000, 33.9],
        #          [1616244912000, 33.9], [1616245546000, 34.4], [1616246180000, 34.4], [1616246847000, 35],
        #          [1616247449000, 35], [1616248116000, 35.6], [1616248750000, 35.6], [1616249384000, 36.1],
        #          [1616250051000, 36.1], [1616250653000, 36.1], [1616251255000, 36.7], [1616251857000, 36.7],
        #          [1616252460000, 37.2], [1616253062000, 37.2], [1616253696000, 37.2], [1616254363000, 37.2],
        #          [1616254965000, 37.8], [1616255601000, 37.8], [1616256204000, 37.2], [1616256805000, 37.2],
        #          [1616257407000, 37.8], [1616258009000, 37.2], [1616258611000, 36.7], [1616259245000, 36.7],
        #          [1616259912000, 36.1], [1616260579000, 35.6], [1616261213000, 35.6], [1616261847000, 35],
        #          [1616262449000, 35], [1616263051000, 34.4], [1616263686000, 34.4], [1616264353000, 33.9],
        #          [1616264987000, 33.9], [1616265589000, 33.3], [1616266191000, 33.3], [1616266793000, 32.8],
        #          [1616267396000, 32.8], [1616267998000, 32.2], [1616268599000, 32.2], [1616269201000, 31.7],
        #          [1616269836000, 31.7], [1616270437000, 31.1], [1616271071000, 31.1], [1616271673000, 31.1],
        #          [1616272275000, 30.6], [1616272910000, 30.6], [1616273511000, 30.6], [1616274113000, 30.6],
        #          [1616274715000, 30], [1616275317000, 30], [1616275984000, 30], [1616276586000, 30],
        #          [1616277188000, 30], [1616277789000, 29.4], [1616278391000, 29.4], [1616278994000, 29.4],
        #          [1616279630000, 28.9], [1616280232000, 28.9], [1616280834000, 28.9], [1616281501000, 28.3],
        #          [1616282136000, 28.3], [1616282738000, 27.8], [1616283373000, 27.8], [1616284008000, 27.8],
        #          [1616284642000, 27.8], [1616285244000, 28.3], [1616285846000, 28.3], [1616286447000, 28.3],
        #          [1616287114000, 27.8], [1616287716000, 27.8], [1616288351000, 27.8], [1616288952000, 27.2],
        #          [1616289555000, 27.2], [1616290156000, 27.2], [1616290758000, 27.2], [1616291393000, 27.2],
        #          [1616292060000, 26.7], [1616292662000, 26.7], [1616293296000, 26.7], [1616293898000, 26.7],
        #          [1616294500000, 26.1], [1616295102000, 26.1], [1616295704000, 26.1], [1616296339000, 26.1],
        #          [1616296941000, 26.1], [1616297641000, 26.1], [1616298243000, 26.1], [1616298845000, 25.6],
        #          [1616299446000, 25.6], [1616300049000, 25.6], [1616300651000, 25.6], [1616301253000, 25.6],
        #          [1616301887000, 25], [1616302489000, 25], [1616303123000, 25], [1616303758000, 24.4],
        #          [1616304457000, 24.4], [1616305059000, 24.4], [1616305660000, 24.4], [1616306327000, 24.4],
        #          [1616306928000, 23.9], [1616307530000, 23.9], [1616308132000, 23.9], [1616308735000, 23.9],
        #          [1616309402000, 23.9], [1616310004000, 23.9], [1616310606000, 23.3], [1616311208000, 23.9],
        #          [1616311810000, 23.9], [1616312412000, 23.9], [1616313046000, 23.9], [1616313647000, 24.4],
        #          [1616314249000, 25.6], [1616314851000, 26.1], [1616315487000, 26.1], [1616316121000, 26.1],
        #          [1616316788000, 26.7], [1616317390000, 27.2], [1616317991000, 27.8], [1616318661000, 27.8],
        #          [1616319262000, 28.3], [1616319864000, 28.9], [1616320466000, 29.4], [1616321067000, 29.4],
        #          [1616321670000, 30], [1616322336000, 30], [1616322940000, 30.6], [1616323574000, 31.1],
        #          [1616324274000, 31.1], [1616324875000, 31.7], [1616325542000, 32.2], [1616326177000, 32.2],
        #          [1616326811000, 32.8], [1616327412000, 32.8], [1616328046000, 33.3], [1616328648000, 33.9],
        #          [1616329249000, 34.4], [1616329851000, 34.4], [1616330453000, 34.4], [1616331086000, 35],
        #          [1616331688000, 35], [1616332324000, 35.6], [1616332958000, 35.6], [1616333560000, 36.1],
        #          [1616334161000, 36.1], [1616334764000, 36.7], [1616335398000, 36.7], [1616336000000, 37.2],
        #          [1616336602000, 37.2], [1616337203000, 37.2], [1616337805000, 37.8], [1616338439000, 37.8],
        #          [1616339041000, 38.3], [1616339642000, 38.3], [1616340244000, 38.3], [1616340879000, 38.3],
        #          [1616341480000, 38.3], [1616342082000, 38.3], [1616342781000, 38.3], [1616343383000, 38.3],
        #          [1616343985000, 38.3], [1616344586000, 37.8], [1616345187000, 37.2], [1616345823000, 37.2],
        #          [1616346425000, 36.7], [1616347058000, 36.7], [1616347660000, 36.1], [1616348262000, 35.6],
        #          [1616348895000, 35.6], [1616349562000, 35], [1616350262000, 35], [1616350930000, 34.4],
        #          [1616351596000, 33.9], [1616352197000, 33.9], [1616352800000, 33.3], [1616353402000, 33.3],
        #          [1616354035000, 32.8], [1616354637000, 32.8], [1616355271000, 32.2], [1616355873000, 32.2],
        #          [1616356476000, 32.2], [1616357110000, 31.7], [1616357876000, 31.7], [1616358477000, 31.7],
        #          [1616359079000, 31.1], [1616359681000, 31.1], [1616360283000, 31.1], [1616360950000, 30.6],
        #          [1616361616000, 30.6], [1616362218000, 30.6], [1616362819000, 30.6], [1616363421000, 30],
        #          [1616364023000, 30], [1616364657000, 30], [1616365324000, 30], [1616365958000, 30],
        #          [1616366559000, 30], [1616367226000, 30], [1616367893000, 29.4], [1616368494000, 29.4],
        #          [1616369161000, 29.4], [1616369798000, 29.4], [1616370399000, 28.9], [1616371000000, 28.9],
        #          [1616371602000, 28.9], [1616372204000, 28.9], [1616372903000, 28.3], [1616373505000, 28.3],
        #          [1616374106000, 28.3], [1616374741000, 27.8], [1616375343000, 27.8], [1616375945000, 27.8],
        #          [1616376546000, 27.2], [1616377148000, 27.2], [1616377750000, 27.2], [1616378385000, 27.2],
        #          [1616378987000, 27.2], [1616379621000, 26.7], [1616380255000, 26.7], [1616380856000, 26.7],
        #          [1616381458000, 26.7], [1616382059000, 26.7], [1616382661000, 26.7], [1616383263000, 26.7],
        #          [1616383865000, 26.7], [1616384466000, 26.7], [1616385101000, 26.7], [1616385703000, 26.7],
        #          [1616386305000, 26.7], [1616386906000, 26.7], [1616387541000, 26.7], [1616388208000, 26.7],
        #          [1616388842000, 26.7], [1616389476000, 26.7], [1616390111000, 26.7], [1616390746000, 26.7],
        #          [1616391379000, 26.7], [1616391982000, 27.2], [1616392716000, 27.2], [1616393317000, 27.2],
        #          [1616394017000, 27.2], [1616394651000, 27.2], [1616395285000, 27.2], [1616395887000, 26.7],
        #          [1616396554000, 26.7], [1616397189000, 26.7], [1616397888000, 27.2], [1616398489000, 27.2],
        #          [1616399124000, 27.8], [1616399726000, 28.3], [1616400360000, 28.3], [1616400995000, 28.9],
        #          [1616401597000, 28.9], [1616402198000, 28.9], [1616402833000, 29.4], [1616403435000, 29.4],
        #          [1616404036000, 30], [1616404638000, 30], [1616405239000, 30.6], [1616405841000, 30.6],
        #          [1616406540000, 30.6], [1616407141000, 31.1], [1616407743000, 31.1], [1616408345000, 31.1],
        #          [1616408980000, 31.7], [1616409582000, 31.7], [1616410184000, 31.7], [1616410786000, 31.7],
        #          [1616411388000, 32.2], [1616411990000, 32.2], [1616412592000, 32.8], [1616413226000, 32.8],
        #          [1616413828000, 33.3], [1616415274000, 33.3], [1616415876000, 33.9], [1616416479000, 33.9],
        #          [1616417114000, 33.9], [1616417813000, 34.4], [1616418512000, 34.4], [1616419114000, 34.4],
        #          [1616419781000, 34.4], [1616420415000, 34.4], [1616421017000, 34.4], [1616421618000, 34.4],
        #          [1616422286000, 35], [1616422887000, 35], [1616423489000, 35.6], [1616424091000, 35.6],
        #          [1616424727000, 35.6], [1616425329000, 35.6], [1616426126000, 35.6], [1616426729000, 35.6],
        #          [1616427363000, 35.6], [1616427966000, 35], [1616428567000, 34.4], [1616429169000, 33.9],
        #          [1616429836000, 33.9], [1616430470000, 33.3], [1616431104000, 32.8], [1616431706000, 30],
        #          [1616432365000, 28.3], [1616432967000, 26.7], [1616433600000, 26.1], [1616434202000, 26.1],
        #          [1616434804000, 26.1], [1616435405000, 26.1], [1616436073000, 26.1], [1616436707000, 26.1],
        #          [1616437310000, 26.1], [1616437911000, 26.1], [1616438513000, 26.1], [1616439115000, 26.1],
        #          [1616439717000, 26.1], [1616440319000, 26.1], [1616440985000, 26.7], [1616441586000, 26.7],
        #          [1616442220000, 26.7], [1616442920000, 26.7], [1616443522000, 26.7], [1616444156000, 26.1],
        #          [1616444791000, 26.1], [1616445392000, 26.1], [1616446058000, 26.1], [1616446661000, 25.6],
        #          [1616447263000, 25.6], [1616447864000, 25.6], [1616448465000, 25.6], [1616449067000, 25.6],
        #          [1616449733000, 25.6], [1616450368000, 25.6], [1616451100000, 25.6], [1616451701000, 25.6],
        #          [1616452335000, 25], [1616452937000, 25], [1616454274000, 25], [1616454877000, 25],
        #          [1616455511000, 25], [1616456178000, 24.4], [1616456812000, 24.4], [1616457446000, 24.4],
        #          [1616458048000, 24.4], [1616458650000, 24.4], [1616459284000, 25], [1616459918000, 24.4],
        #          [1616460520000, 24.4], [1616461123000, 24.4], [1616461725000, 24.4], [1616462327000, 24.4],
        #          [1616462930000, 24.4], [1616463531000, 24.4], [1616464166000, 24.4], [1616464880000, 24.4],
        #          [1616465485000, 24.4], [1616466120000, 24.4], [1616466787000, 24.4], [1616467486000, 24.4],
        #          [1616468087000, 24.4], [1616468689000, 24.4], [1616469292000, 24.4], [1616469894000, 24.4],
        #          [1616470528000, 24.4], [1616471194000, 24.4], [1616471828000, 24.4], [1616472463000, 24.4],
        #          [1616473065000, 24.4], [1616473667000, 24.4], [1616474301000, 24.4], [1616474936000, 24.4],
        #          [1616475538000, 24.4], [1616476139000, 24.4], [1616476741000, 24.4], [1616477343000, 24.4],
        #          [1616478009000, 24.4], [1616478612000, 23.9], [1616479213000, 23.9], [1616479814000, 23.9],
        #          [1616480449000, 23.9], [1616481052000, 23.9], [1616481752000, 23.9], [1616482419000, 23.9],
        #          [1616483021000, 23.9], [1616483688000, 23.9], [1616484290000, 23.9], [1616484891000, 23.9],
        #          [1616485493000, 23.9], [1616486094000, 23.9], [1616486742000, 23.9], [1616487376000, 24.4],
        #          [1616488043000, 24.4], [1616488742000, 24.4], [1616489376000, 25], [1616489978000, 25],
        #          [1616490580000, 25], [1616491182000, 25.6], [1616491783000, 26.1], [1616492385000, 26.1],
        #          [1616492988000, 26.7], [1616493590000, 27.2], [1616494192000, 27.2], [1616494794000, 27.8],
        #          [1616495396000, 27.8], [1616496031000, 28.3], [1616496632000, 28.3], [1616497364000, 28.3],
        #          [1616497966000, 28.9], [1616498568000, 28.9], [1616499171000, 29.4], [1616499773000, 29.4],
        #          [1616500374000, 30], [1616501009000, 30], [1616501643000, 30], [1616502278000, 30.6],
        #          [1616502912000, 30.6], [1616503546000, 31.1], [1616504148000, 31.1], [1616504782000, 31.1],
        #          [1616505384000, 31.7], [1616505985000, 31.7], [1616506587000, 32.2], [1616507221000, 32.2],
        #          [1616507823000, 32.2], [1616508555000, 32.8], [1616509190000, 32.8], [1616509791000, 32.8],
        #          [1616510426000, 32.8], [1616511190000, 32.8], [1616511824000, 32.8], [1616512426000, 33.3],
        #          [1616513027000, 33.3], [1616513629000, 33.3], [1616514231000, 33.3], [1616514865000, 33.9],
        #          [1616515467000, 33.9], [1616516101000, 33.9], [1616516703000, 33.9], [1616517337000, 33.9],
        #          [1616517940000, 33.9], [1616518542000, 33.3], [1616519144000, 33.3], [1616519745000, 33.3],
        #          [1616520347000, 33.3], [1616520949000, 32.8], [1616521551000, 32.8], [1616522153000, 32.8],
        #          [1616522787000, 32.2], [1616523455000, 32.2], [1616524089000, 32.2], [1616524722000, 31.7],
        #          [1616525357000, 31.7], [1616525959000, 31.1], [1616526561000, 31.1], [1616527163000, 31.1],
        #          [1616527765000, 30.6], [1616528476000, 30.6], [1616529111000, 30.6], [1616529713000, 30],
        #          [1616530315000, 30], [1616531015000, 30], [1616531746000, 30], [1616532349000, 29.4],
        #          [1616532952000, 29.4], [1616533618000, 29.4], [1616534219000, 29.4], [1616534821000, 28.9],
        #          [1616535521000, 28.9], [1616536188000, 28.9], [1616536823000, 28.9], [1616537521000, 28.9],
        #          [1616538124000, 28.3], [1616538725000, 28.3], [1616539327000, 28.3], [1616539928000, 27.8],
        #          [1616540596000, 27.8], [1616541263000, 27.8], [1616541994000, 27.8], [1616542596000, 27.8],
        #          [1616543230000, 27.2], [1616543864000, 27.2], [1616544466000, 27.2], [1616545133000, 27.2],
        #          [1616545734000, 27.2], [1616546336000, 27.2], [1616546938000, 27.2], [1616547572000, 27.2],
        #          [1616548272000, 27.2], [1616548875000, 26.7], [1616549476000, 26.7], [1616550078000, 26.7],
        #          [1616550713000, 26.7], [1616551348000, 26.7], [1616551949000, 26.7], [1616552551000, 26.1],
        #          [1616553153000, 26.1], [1616553754000, 26.1], [1616554356000, 26.1], [1616554990000, 25.6],
        #          [1616555625000, 25.6], [1616556228000, 25.6], [1616556862000, 25.6], [1616557562000, 25.6],
        #          [1616558197000, 25], [1616558863000, 25], [1616559530000, 25], [1616560164000, 25],
        #          [1616560798000, 25], [1616561400000, 25], [1616562002000, 25], [1616562603000, 25],
        #          [1616563238000, 25], [1616563840000, 25], [1616564507000, 25], [1616565108000, 24.4],
        #          [1616565710000, 24.4], [1616566344000, 24.4], [1616566946000, 24.4], [1616567613000, 24.4],
        #          [1616568279000, 24.4], [1616568881000, 24.4], [1616569580000, 24.4], [1616570313000, 24.4],
        #          [1616570915000, 24.4], [1616571549000, 24.4], [1616572183000, 24.4], [1616572785000, 25],
        #          [1616573419000, 25], [1616574021000, 25.6], [1616574622000, 25.6], [1616575224000, 26.1],
        #          [1616575923000, 26.1], [1616576558000, 26.7], [1616577192000, 26.7], [1616577793000, 27.2],
        #          [1616578395000, 27.8], [1616578997000, 27.8], [1616579598000, 28.3], [1616580232000, 28.3],
        #          [1616580834000, 28.9], [1616581435000, 29.4], [1616582135000, 29.4], [1616582802000, 30],
        #          [1616583468000, 30], [1616584071000, 30.6], [1616584737000, 30.6], [1616585339000, 30.6],
        #          [1616586071000, 31.1], [1616586673000, 31.1], [1616587275000, 31.7], [1616587877000, 31.7],
        #          [1616588478000, 31.7], [1616589080000, 32.2], [1616589682000, 32.2], [1616590316000, 32.2],
        #          [1616590918000, 32.8], [1616591520000, 32.8], [1616592122000, 33.3], [1616592723000, 33.9],
        #          [1616593325000, 33.9], [1616593927000, 33.9], [1616594528000, 33.9], [1616595195000, 34.4],
        #          [1616595796000, 34.4], [1616596495000, 35], [1616597097000, 35], [1616597699000, 35],
        #          [1616598333000, 35.6], [1616598967000, 35.6], [1616599569000, 35.6], [1616600170000, 35.6],
        #          [1616600773000, 35.6], [1616601472000, 35.6], [1616602139000, 36.1], [1616602740000, 36.1],
        #          [1616603407000, 36.1], [1616604041000, 36.1], [1616604642000, 35.6], [1616605309000, 35.6],
        #          [1616605911000, 35], [1616606545000, 34.4], [1616607147000, 34.4], [1616607749000, 33.9],
        #          [1616608415000, 33.9], [1616609017000, 33.9], [1616609683000, 33.9], [1616610350000, 33.3],
        #          [1616610952000, 33.3], [1616611553000, 33.3], [1616612221000, 32.8], [1616612823000, 32.8],
        #          [1616613522000, 32.8], [1616614157000, 32.8], [1616614759000, 32.2], [1616615555000, 32.2],
        #          [1616616157000, 31.7], [1616616823000, 31.7], [1616617457000, 31.7], [1616618075000, 31.1],
        #          [1616618672000, 31.1], [1616619339000, 31.1], [1616619942000, 31.1], [1616620577000, 30.6],
        #          [1616621179000, 30.6], [1616621814000, 30.6], [1616622417000, 30], [1616623018000, 30],
        #          [1616623621000, 30], [1616624223000, 29.4], [1616624857000, 29.4], [1616625491000, 29.4],
        #          [1616626126000, 28.9], [1616626728000, 28.9], [1616627362000, 28.9], [1616627996000, 28.9],
        #          [1616628630000, 28.3], [1616629232000, 28.3], [1616629833000, 28.3], [1616630469000, 28.3],
        #          [1616631070000, 28.3], [1616631672000, 27.8], [1616632273000, 27.8], [1616632875000, 27.8],
        #          [1616633542000, 27.8], [1616634274000, 27.2], [1616634875000, 27.2], [1616635477000, 27.2],
        #          [1616636079000, 27.2], [1616636681000, 27.2], [1616637412000, 27.2], [1616638047000, 26.7],
        #          [1616638649000, 26.7], [1616639251000, 26.7], [1616639885000, 26.7], [1616640487000, 26.7],
        #          [1616641088000, 26.7], [1616641820000, 26.1], [1616642422000, 26.1], [1616643024000, 26.1],
        #          [1616643626000, 26.1], [1616644227000, 26.1], [1616644829000, 26.1], [1616645431000, 26.1],
        #          [1616646033000, 25.6], [1616646635000, 25.6], [1616647237000, 25.6], [1616647871000, 25.6],
        #          [1616648473000, 25.6], [1616649140000, 25.6], [1616649807000, 25], [1616650408000, 25],
        #          [1616651010000, 25], [1616651644000, 25], [1616652246000, 25], [1616652946000, 25],
        #          [1616653548000, 25], [1616654312000, 25], [1616654914000, 25], [1616655580000, 25],
        #          [1616656183000, 25], [1616656784000, 25], [1616657386000, 25], [1616657987000, 25],
        #          [1616658589000, 25.6], [1616659191000, 25.6], [1616659793000, 26.1], [1616660459000, 26.1],
        #          [1616661061000, 26.1], [1616661662000, 26.7], [1616662328000, 26.7], [1616662963000, 27.2],
        #          [1616663630000, 27.2], [1616664232000, 27.8], [1616664833000, 27.8], [1616665436000, 28.3],
        #          [1616666037000, 28.9], [1616666672000, 28.9], [1616667339000, 29.4], [1616668039000, 29.4],
        #          [1616668641000, 30], [1616669242000, 30], [1616669876000, 30.6], [1616670545000, 30.6],
        #          [1616671244000, 31.1], [1616671846000, 31.1], [1616672545000, 31.7], [1616673146000, 31.7],
        #          [1616673747000, 32.2], [1616674381000, 32.2], [1616675114000, 32.8], [1616675747000, 32.8],
        #          [1616676350000, 32.8], [1616677050000, 33.3], [1616677652000, 33.3], [1616678255000, 33.9],
        #          [1616678856000, 33.9], [1616679458000, 34.4], [1616680060000, 34.4], [1616680661000, 35],
        #          [1616681263000, 35], [1616681897000, 35], [1616682531000, 35.6], [1616683133000, 35.6],
        #          [1616683735000, 36.1], [1616684369000, 36.1], [1616685003000, 36.1], [1616685605000, 36.1],
        #          [1616686272000, 36.1], [1616686939000, 36.1], [1616687541000, 36.1], [1616688176000, 36.1],
        #          [1616688778000, 36.1], [1616689412000, 36.1], [1616690013000, 36.1], [1616690615000, 35.6],
        #          [1616691217000, 35], [1616691819000, 34.4], [1616692420000, 34.4], [1616693022000, 34.4],
        #          [1616693689000, 33.9], [1616694323000, 33.9], [1616694925000, 33.9], [1616695526000, 33.9],
        #          [1616696193000, 33.3], [1616696892000, 33.3], [1616697494000, 33.3], [1616698128000, 32.8],
        #          [1616698731000, 32.8], [1616699365000, 32.8], [1616699967000, 32.8], [1616700666000, 32.2],
        #          [1616701300000, 32.2], [1616701901000, 32.2], [1616702504000, 31.7], [1616703105000, 31.7],
        #          [1616703707000, 31.7], [1616704340000, 31.7], [1616705007000, 31.7], [1616705706000, 31.7],
        #          [1616706309000, 31.7], [1616706911000, 31.7], [1616707610000, 31.7], [1616708244000, 31.7],
        #          [1616708845000, 31.7], [1616709578000, 31.7], [1616710180000, 31.1], [1616710782000, 31.1],
        #          [1616711383000, 31.1], [1616711984000, 31.1], [1616712652000, 30.6], [1616713254000, 30.6],
        #          [1616713855000, 30.6], [1616714457000, 30.6], [1616715058000, 30], [1616715661000, 30],
        #          [1616716295000, 30], [1616716929000, 30], [1616717531000, 29.4], [1616718132000, 29.4],
        #          [1616718734000, 29.4], [1616719410000, 29.4], [1616720012000, 29.4], [1616720614000, 29.4],
        #          [1616721216000, 29.4], [1616721884000, 29.4], [1616722487000, 28.9], [1616723090000, 28.9],
        #          [1616723692000, 28.9], [1616724295000, 28.9], [1616724963000, 28.9], [1616725631000, 28.9],
        #          [1616726233000, 28.9], [1616726835000, 28.9], [1616727437000, 28.9], [1616728070000, 28.9],
        #          [1616728738000, 28.3], [1616729372000, 28.3], [1616729973000, 28.3], [1616730639000, 28.3],
        #          [1616731241000, 28.3], [1616731875000, 28.3], [1616732508000, 27.8], [1616733110000, 27.8],
        #          [1616733712000, 27.2], [1616734313000, 27.2], [1616734916000, 26.7], [1616735618000, 26.7],
        #          [1616736223000, 26.7], [1616736824000, 26.1], [1616737426000, 26.1], [1616738029000, 26.1],
        #          [1616738630000, 26.1], [1616739232000, 26.1], [1616739834000, 25.6], [1616740505000, 25.6],
        #          [1616741140000, 25.6], [1616741743000, 25.6], [1616742344000, 25.6], [1616742978000, 25.6],
        #          [1616743580000, 25.6], [1616744215000, 25.6], [1616744824000, 25.6], [1616745460000, 26.1],
        #          [1616746074000, 26.7], [1616746745000, 26.7], [1616747347000, 26.7], [1616747949000, 27.2],
        #          [1616748550000, 27.8], [1616749218000, 28.3], [1616749854000, 28.9], [1616750494000, 28.9],
        #          [1616751099000, 29.4], [1616751701000, 29.4], [1616752303000, 29.4], [1616752904000, 30],
        #          [1616753506000, 30], [1616754140000, 30.6], [1616754742000, 30.6], [1616755375000, 31.1],
        #          [1616756010000, 31.1], [1616756611000, 31.7], [1616757279000, 31.7], [1616757881000, 32.2],
        #          [1616758483000, 32.2], [1616759085000, 32.8], [1616759688000, 32.8], [1616760322000, 33.3],
        #          [1616760923000, 33.3], [1616761557000, 33.3], [1616762159000, 33.9], [1616762760000, 33.9],
        #          [1616763426000, 33.9], [1616764061000, 34.4], [1616764695000, 34.4], [1616765329000, 35],
        #          [1616765964000, 35], [1616766631000, 35.6], [1616767234000, 35.6], [1616767836000, 35.6],
        #          [1616768438000, 35.6], [1616769040000, 36.1], [1616770516000, 36.1], [1616771118000, 36.1],
        #          [1616771754000, 36.1], [1616772355000, 35.6], [1616772957000, 34.4], [1616774191000, 33.3],
        #          [1616774825000, 33.3], [1616775460000, 32.2], [1616776061000, 31.7], [1616776695000, 31.7],
        #          [1616777329000, 31.7], [1616777930000, 31.7], [1616778531000, 31.7], [1616779296000, 31.7],
        #          [1616779897000, 31.7], [1616780499000, 31.7], [1616781101000, 32.2], [1616781768000, 32.2],
        #          [1616782370000, 31.1], [1616782971000, 30], [1616783573000, 30], [1616784174000, 29.4],
        #          [1616784776000, 29.4], [1616785378000, 29.4], [1616786012000, 29.4], [1616786614000, 29.4],
        #          [1616787217000, 29.4], [1616787818000, 29.4], [1616788420000, 29.4], [1616789021000, 29.4],
        #          [1616789656000, 29.4], [1616790257000, 29.4], [1616790891000, 29.4], [1616791493000, 29.4],
        #          [1616792095000, 28.9], [1616792795000, 28.9], [1616793396000, 28.9], [1616794030000, 28.9],
        #          [1616794697000, 28.9], [1616795298000, 28.9], [1616795900000, 28.9], [1616796502000, 28.3],
        #          [1616797103000, 28.3], [1616797705000, 28.3], [1616798373000, 27.8], [1616799039000, 27.8],
        #          [1616799674000, 27.8], [1616800275000, 27.8], [1616800877000, 27.8], [1616801479000, 27.8],
        #          [1616802112000, 27.2], [1616802746000, 27.2], [1616803447000, 27.2], [1616804113000, 27.2],
        #          [1616804747000, 26.7], [1616805511000, 26.7], [1616806145000, 26.7], [1616806747000, 26.7]]
        #
        # print(type(data[0][0]))
        # convert = int(data[0][0])
        # print(type(convert))
        # dt_object = datetime.timestamp(convert)
        #
        # print("dt_object =", dt_object)
        # print("type(dt_object) =", type(dt_object))

        # date = datetime(year=int(datas[0:4]), month=int(datas[4:6]), day=int(datas[6:8]))
        # # dt_object = datetime.datetime.datetime.fromtimestamp(date)
        # s = date.strftime("%Y%m%d")
        # print(s)
        # print(date)

        # df = DataFrame(data,columns=['timestamp','temp'])
        # t_avg = df['temp']
        # df["TAVG"] = df.apply(t_avg, axis=1)
        # df = df[["TAVG"]]
        # df = df.dropna()
        # df.head()
        # train_df = df.reset_index()
        # train_df = train_df.rename(columns={"timestamp": "ds", "TAVG": "y"})
        #
        # model = Prophet(weekly_seasonality=True,
        #                 daily_seasonality=True)
        # model.fit(train_df)
        #
        # test_df = df.rename(columns={"timestamp": "ds", "temp": "y"})
        # test_pred = model.predict(test_df)
        #
        # model_score = r2_score(test_df["y"], test_pred["yhat"])
        # print(model_score)
        #
        # future_df = model.make_future_dataframe(periods=1)  # +1 year of data!
        # prediction = model.predict(future_df)
        # model.plot_components(prediction)
        # print(prediction)
        #
        #
        #
        # ax6 = prediction.plot(x="ds", y="yhat")
        # ax6.set_xlim(pd.Timestamp("2020-01-01"), pd.Timestamp("2021-03-31"))
        # ax6.set_xlabel("Date (YYYY-MM)")
        # ax6.set_ylabel("Temperature (C)")
        # ax6.set_title("Temperature Predictions for 2020-2021")



        # scorce_test = r2_score(train_df["y"], fcst["yhat"])
        # print(scorce_test)

        # df['cap'] = 40
        # df['floor'] = 0
        # df = df.rename(columns={'date_time': 'ds', 'temp': 'y'})
        # print(df)
        # m = Prophet(daily_seasonality=True) #model
        # m.fit(df)
        # future = m.make_future_dataframe(periods=2)
        # future['cap'] = 50
        # future['floor'] = 0
        # future.tail(5)
        # fcst = m.predict(future)
        # m.plot(fcst)
        # print(fcst)




        # future = m.make_future_dataframe(periods=2)

        # names=[]
        #
        # for data in df['name']:
        #     # print(name)
        #     names.append(df[(df['name'] == data)])
        # # print(a)
        # a=df.values.tolist()
        # list_forecast=[]
        # dict_forecast={}
        # for data_tolist in a:
        #     dict_forecast['name'] = data_tolist[0]
        #     dict_forecast_copy=dict_forecast.copy()
        #     list_forecast.append(dict_forecast_copy)
        # # print(list_forecast)
        # data_forecast=[]
        # # print(df['date_time'])
        # # for item, data in df['DateTime'].iteritems():
        # #     # data.reset_index()
        # #     # data.head()
        # #     df['date_time'] = pd.to_datetime(df['date_time'])
        # #     # if data['date_time'] == datetime.today().date():
        # #     print(data['date_time'])
        # #     # df['DateTime'] = pd.to_datetime(df['DateTime'])
        # # print(names)


        # for train_df in names:
        #     # datas = datas.rename(columns={'date_time': 'ds', 'temp_avg': 'y'})
        #     # print(datas)
        #     # m = Prophet(daily_seasonality=True)  # model
        #     # m.fit(datas)
        #     # future = m.make_future_dataframe(periods=2)
        #     # future['cap'] = 50
        #     # future['floor'] = -50
        #     # future.tail(5)
        #     # fcst = m.predict(future)
        #     # m.plot(fcst)
        #     # print(fcst)
        #     # เพิ่มfieldเข้าไป
        #     train_df = train_df.reset_index()
        #     train_df = train_df.rename(columns={"date_time": "ds", "temp_avg": "y"})
        #     model = Prophet()
        #     model.fit(train_df)
        #     test_df = train_df.rename(columns={"date_time": "ds", "temp_avg": "y"})
        #     test_pred = model.predict(test_df)
        #
        #     model_score = r2_score(test_df["y"], test_pred["yhat"])
        #     print(model_score)



            # print(data.ds)
            # print(data)
            # m = Prophet(daily_seasonality=True) #model
            # m.fit(data)
            # print(m)
            # future = m.make_future_dataframe(periods=2)
            # future['cap'] = 50
            # future['floor'] = 0
            # future.tail(5)
            # fcst = m.predict(future)
            #
            # print(fcst)

        # for data in names:
        #     print(data)
            # print(data['name'])
        # print(data_forecast[0])
        # for i in a:
            # print(i['name'])
            # for j in i['date_time']:
            #     print(type(j))


    def call_schedu(self):
        self.save_listname()
        self.save_reportstation()
        self.save_pm()
        self.save_weatherdata()
        # self.history()
        self.export()
        self.add_data_history()
        # self.forecast()
