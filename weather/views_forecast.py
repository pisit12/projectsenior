import pandas as pd
import numpy as np
import pytz
from fbprophet import Prophet
import matplotlib.pyplot as plt
from pandas import DataFrame
from rest_framework import viewsets, mixins, status
# Create your views here.
from rest_framework.filters import SearchFilter
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from sklearn.metrics import r2_score

from weather.models import ReportStation, ForecastWeather
from weather.serializers import ForecastSerializer
import os.path


import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
from fbprophet import Prophet
import statsmodels.api as sm # Time series analysis
import datetime as dt
from datetime import datetime, date

from sklearn.metrics import r2_score


class ForecastViewset(mixins.CreateModelMixin,
                      mixins.RetrieveModelMixin,
                      mixins.ListModelMixin,
                      viewsets.GenericViewSet):

    queryset = ForecastWeather.objects.all()
    serializer_class = ForecastSerializer
    permission_classes = [AllowAny]
    filter_backends = [SearchFilter]
    search_fields = ['name']

    def list(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())

        plt.rcParams['figure.figsize'] = (20, 10)
        plt.style.use('ggplot')

        pd.plotting.register_matplotlib_converters()
        temp_df = pd.read_csv('./weather/weather_forecast.csv',
                         parse_dates=True, usecols=['date_time', 'temp_avg', 'name'])
        temp_df.head()
        df = temp_df.reset_index()
        # print(df)
        df['cap'] = 50
        df = df.rename(columns={'date_time': 'ds', 'temp_avg': 'y'})
        model = Prophet(
            interval_width = 0.90,
                        daily_seasonality=True,
                        weekly_seasonality=True,
                        yearly_seasonality=True,
                        changepoint_prior_scale=0.10
                    )
        model.fit(df)
        df = df.rename(columns={'date_time': 'ds', 'temp_avg': 'y'})
        test_pred = model.predict(df)
        model_score = r2_score(df["y"],test_pred["yhat"])
        print(model_score)

        future = model.make_future_dataframe(periods=1)
        future['cap'] = 50

        forecast = model.predict(future)
        forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(5)
        print(forecast)

        # datas = [[1616285654000,28.3],[1616287478000,28.3],[1616289302000,27.8],[1616291126000,28.3],[1616292950000,28.3],[1616294774000,28.3],[1616296598000,27.8],[1616298421000,27.8],[1616300245000,27.8],[1616302073000,27.8],[1616303893000,27.8],[1616305717000,28.3],[1616307541000,27.8],[1616309365000,27.8],[1616311189000,28.3],[1616313013000,30],[1616314836000,30.6],[1616316660000,31.1],[1616318484000,31.1],[1616320308000,32.2],[1616322132000,33.3],[1616323956000,33.3],[1616325780000,33.9],[1616327604000,35],[1616329428000,36.1],[1616331252000,36.1],[1616333076000,36.7],[1616334899000,36.1],[1616336723000,36.7],[1616340405000,36.1],[1616342229000,36.7],[1616344053000,36.7],[1616345876000,36.1],[1616347701000,36.1],[1616349524000,35],[1616351348000,33.9],[1616352578000,33.3],[1616354527000,32.8],[1616356352000,31.7],[1616358176000,31.1],[1616359999000,30.6],[1616361824000,30],[1616363648000,29.4],[1616365471000,28.9],[1616367295000,28.9],[1616369119000,28.9],[1616370943000,28.9],[1616372766000,28.9],[1616374590000,28.3],[1616376414000,28.3],[1616378238000,28.3],[1616380062000,28.9],[1616381886000,28.3],[1616383710000,28.3],[1616385534000,28.9],[1616387358000,28.3],[1616389181000,28.9],[1616391005000,28.9],[1616392829000,28.9],[1616394653000,28.9],[1616396480000,28.9],[1616398301000,28.9],[1616400125000,29.4],[1616401949000,30],[1616403773000,30.6],[1616405597000,30.6],[1616407420000,31.1],[1616409244000,31.7],[1616411069000,32.2],[1616412892000,33.3],[1616414716000,33.3],[1616416540000,33.9],[1616418364000,33.9],[1616420188000,34.4],[1616422012000,34.4],[1616423835000,35],[1616424757000,35],[1616426582000,34.4],[1616428405000,33.9],[1616430229000,33.9],[1616432053000,33.3],[1616433876000,32.8],[1616435700000,32.2],[1616437524000,31.7],[1616439350000,31.1],[1616441172000,31.7],[1616442996000,30.6],[1616444820000,30.6],[1616446644000,30.6],[1616448468000,30.6],[1616450292000,30],[1616452115000,30],[1616453939000,30],[1616455763000,30],[1616457587000,30],[1616459411000,29.4],[1616461235000,29.4],[1616463059000,29.4],[1616464883000,28.9],[1616466707000,28.9],[1616468530000,28.9],[1616470354000,28.9],[1616472178000,28.3],[1616474002000,28.9],[1616475826000,29.4],[1616477650000,28.9],[1616479474000,28.9],[1616481298000,28.9],[1616483122000,29.4],[1616484946000,30],[1616486769000,30.6],[1616488593000,30.6],[1616490417000,30.6],[1616492241000,30.6],[1616494065000,31.1],[1616495889000,31.1],[1616497713000,32.8],[1616499537000,33.9],[1616501468000,33.3],[1616503298000,33.3],[1616505116000,33.3],[1616506940000,33.9],[1616508764000,35],[1616509342000,33.9],[1616511151000,34.4],[1616512975000,34.4],[1616514799000,34.4],[1616516623000,33.9],[1616518446000,33.3],[1616520273000,33.3],[1616522094000,32.2],[1616523918000,31.7],[1616525742000,31.1],[1616527566000,31.1],[1616529390000,30.6],[1616531214000,30.6],[1616533038000,30],[1616534862000,29.4],[1616536685000,30],[1616538509000,29.4],[1616540333000,29.4],[1616542157000,29.4],[1616543981000,28.9],[1616545805000,29.4],[1616547629000,28.9],[1616549453000,28.9],[1616551277000,28.9],[1616553101000,28.9],[1616554925000,28.9],[1616556749000,29.4],[1616560438000,28.9],[1616562262000,29.4],[1616564086000,29.4],[1616565910000,29.4],[1616567733000,28.9],[1616569557000,28.3],[1616571381000,28.9],[1616573205000,28.9],[1616575029000,29.4],[1616576853000,30],[1616578677000,30.6],[1616580500000,30],[1616582324000,30.6],[1616584148000,32.2],[1616585972000,31.7],[1616587796000,31.1],[1616589620000,31.7],[1616591444000,32.2],[1616593268000,33.3],[1616595092000,33.3],[1616596916000,32.2],[1616599272000,31.7],[1616601096000,32.2],[1616602920000,32.8],[1616604744000,31.7],[1616606568000,31.1],[1616608392000,29.4],[1616610216000,29.4],[1616612040000,27.8],[1616613864000,28.3],[1616615687000,28.3],[1616617511000,27.2],[1616619335000,27.2],[1616621159000,27.8],[1616622983000,27.8],[1616624807000,26.7],[1616626631000,26.7],[1616628455000,26.1],[1616630279000,26.7],[1616632102000,26.7],[1616633926000,26.7],[1616635750000,27.2],[1616637574000,27.8],[1616639398000,27.8],[1616641222000,27.2],[1616643046000,26.7],[1616644870000,27.2],[1616646694000,27.2],[1616648518000,27.2],[1616650341000,26.7],[1616652165000,26.7],[1616653989000,26.7],[1616655813000,27.2],[1616657637000,27.2],[1616659461000,28.3],[1616661285000,29.4],[1616663109000,30],[1616664933000,30.6],[1616666758000,30.6],[1616668580000,31.1],[1616670404000,32.2],[1616672228000,32.8],[1616674052000,32.2],[1616675876000,31.7],[1616677701000,33.3],[1616679524000,32.8],[1616681348000,34.4],[1616683171000,35],[1616683847000,34.4],[1616685672000,34.4],[1616687495000,34.4],[1616689594000,34.4],[1616691418000,33.9],[1616693241000,33.9],[1616695065000,32.2],[1616696889000,31.7],[1616698713000,31.1],[1616700537000,30.6],[1616702361000,30.6],[1616704185000,30],[1616706009000,30],[1616707833000,29.4],[1616709657000,29.4],[1616711488000,29.4],[1616713304000,29.4],[1616715128000,29.4],[1616716953000,28.9],[1616718777000,28.9],[1616720601000,28.9],[1616722424000,28.9],[1616724248000,28.9],[1616726072000,28.9],[1616727896000,28.9],[1616729719000,28.3],[1616731543000,28.3],[1616733367000,28.3],[1616735191000,27.8],[1616737015000,28.3],[1616738839000,28.3],[1616740663000,28.3],[1616742487000,28.3],[1616744311000,28.9],[1616746135000,30],[1616747958000,30.6],[1616749783000,31.1],[1616751606000,31.7],[1616753430000,33.3],[1616755254000,33.3],[1616757078000,33.9],[1616758902000,34.4],[1616760726000,35.6],[1616762550000,34.4],[1616764374000,35],[1616766198000,36.1],[1616768021000,35.6],[1616769845000,35.6],[1616771924000,34.4],[1616773748000,33.9],[1616775571000,33.3],[1616777395000,33.9],[1616779219000,33.3],[1616781043000,32.8],[1616782867000,32.2],[1616784691000,31.1],[1616786515000,31.1],[1616788339000,30],[1616790163000,28.9],[1616791987000,28.3],[1616793811000,28.3],[1616795634000,27.8],[1616797458000,28.9],[1616799282000,27.8],[1616801106000,28.3],[1616802930000,27.8],[1616804754000,27.8],[1616806578000,27.8],[1616808402000,28.3],[1616810225000,27.8],[1616812049000,28.3],[1616813873000,28.3],[1616815697000,28.3],[1616817521000,28.3],[1616819345000,28.3],[1616821169000,27.8],[1616822993000,28.3],[1616824817000,28.3],[1616826640000,28.3],[1616828464000,28.3],[1616830288000,30],[1616832112000,30.6],[1616833936000,31.7],[1616835760000,31.7],[1616837584000,32.2],[1616839408000,31.7],[1616841232000,32.2],[1616843056000,32.8],[1616844879000,33.3],[1616846716000,33.9],[1616848527000,34.4],[1616850351000,34.4],[1616852175000,35],[1616853171000,35],[1616854995000,35.6],[1616856489000,35],[1616858312000,35],[1616859261000,35],[1616861085000,34.4],[1616862909000,34.4],[1616864733000,34.4],[1616866557000,33.9],[1616868381000,33.9],[1616870205000,32.2],[1616872029000,31.7],[1616873852000,31.1],[1616875676000,31.1],[1616877500000,30.6],[1616879324000,30.6],[1616881148000,30.6],[1616882973000,30.6],[1616884797000,30],[1616886621000,30],[1616888445000,30]]
        #
        # for i in datas:
        #     ts = i[0] / 1000
        #     dt_object = datetime.fromtimestamp(ts)
        #     timezone = pytz.timezone("Asia/Bangkok")
        #     edit_datedata = dt_object.astimezone(timezone)
        #     local_data = edit_datedata.strftime('%Y-%m-%d')
        #     # print(local_data)
        #     i[0] = local_data
        #
        # df = DataFrame(datas, columns=['date', 'temp'])
        # d_f = df[['date', 'temp']].groupby(['date']).agg({'temp': ['mean']})
        # # d_f = train_df.rename(columns={"date": "ds", "TAVG": "y"})
        #
        # # for rows in d_f.iterrows():
        # #     print(rows)
        # dict_all = {}
        # list_data = []
        # for row in d_f.iterrows():
        #     # print(row[1][0])
        #     dict_data = {}
        #     dict_data['temp_avg'], dict_data['date_time'] = row[1][0], row[0]
        #     # print(dict_data['date_time'])
        #     date_time_str = dict_data['date_time']
        #     date_time_obj = dt.datetime.strptime(date_time_str, '%Y-%m-%d')
        #     dict_data['date_time'] = date_time_obj
        #     dict_all.update(dict_data)
        #     dict_all_copy = dict_all.copy()
        #     list_data.append(dict_all_copy)
        #
        # # print(list_data)
        # # print(list_data[:-2])
        #
        # test_df = pd.DataFrame(list_data)
        #
        # # print(test_df)
        #
        # test_df.head()
        # test_df = test_df.reset_index()
        # # print(df)
        # test_df['cap'] = 50
        # test_df = test_df.rename(columns={'date_time': 'ds', 'temp_avg': 'y'})
        # model = Prophet(
        #     interval_width=0.95,
        #     daily_seasonality=True,
        #     # weekly_seasonality=True,
        #     # yearly_seasonality=True,
        #     changepoint_prior_scale=0.05
        # )
        # model.fit(test_df)
        # test_df = test_df.rename(columns={'date_time': 'ds', 'temp_avg': 'y'})
        # test_pred = model.predict(test_df)
        # model_score = r2_score(test_df["y"], test_pred["yhat"])
        # print(model_score)
        #
        # future = model.make_future_dataframe(periods=1)
        # future['cap'] = 50
        #
        # forecast = model.predict(future)
        # # forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(5)
        # print(forecast)

        page = self.paginate_queryset(queryset)
        # print(page)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)
            # print(page)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)
